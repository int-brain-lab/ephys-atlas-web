export { CustomFeature };

import { encode, decode } from "./utils.js";


/*************************************************************************************************/
/* Constants                                                                                     */
/*************************************************************************************************/

const B64STRING = "";


/*************************************************************************************************/
/* Utils                                                                                         */
/*************************************************************************************************/

function decodeBuffer(b64s) {
    return new Uint8Array(Array.from(atob(b64s), function (byte) {
        return byte.charCodeAt(0);
    }));
}


function decodeFloat32(b64s) {
    return new Float32Array(decodeBuffer(b64s).buffer);
}


function decodeInt32(b64s) {
    return new Int32Array(decodeBuffer(b64s).buffer);
}


/*************************************************************************************************/
/* Custom feature                                                                                */
/*************************************************************************************************/

class CustomFeature {
    constructor(db) {
        this.db = db;
    }

    loadFromUrl() {
        let query = new Proxy(new URLSearchParams(window.location.search), {
            get: (searchParams, prop) => searchParams.get(prop),
        });
        this.load(query.custom_features, 0);
    }

    load(base64, progress) {
        let obj = decode(base64);
        let fset = obj.fset;
        let mapping = obj.mapping.toLowerCase();
        let regions = decodeInt32(obj.region_idx);
        let n = regions.length;
        console.assert(n > 0);

        let dbobj = {};
        for (let [fname, stat, b64_data, statistics] of obj.features) {
            let values = decodeFloat32(b64_data);
            let data = {};
            for (let i = 0; i < n; i++) {
                let idx = regions[i];
                let value = values[i];
                data[idx] = { [stat]: value };
            }
            dbobj[mapping] = { [fname]: { 'data': data, 'statistics': statistics } };
        }

        console.log(`adding custom features ${fset} with ${obj.features.length} features of ${n} values`);
        db.addFeatures(fset, dbobj, progress);
    }
};
